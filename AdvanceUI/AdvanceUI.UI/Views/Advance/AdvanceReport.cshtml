@model List<AdvanceSelectDTO>
@{
    ViewData["Title"] = "Avans Talep Rapor Alma";
}

<div class="container col-md-12">
    <div class="card">
        <div class="card-body table-border-style">
            <div class="btn-group" role="group" aria-label="Dosya İşlemleri">
                <button type="button" class="btn btn-secondary">
                    <i class="fas fa-file-pdf"></i> PDF Rapor
                </button>
                <button type="button" class="btn btn-secondary">
                    <i class="fas fa-file-excel"></i> Excel Rapor
                </button>
            </div>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Çalışanın Adı</th>
                            <th>Ünvanı</th>
                            <th>Birimi</th>
                            <th>Talep<br />Tutarı</th>
                            <th>Talep<br />Oluşturma<br />Tarihi</th>
                            <th>İstenilen Tarih</th>
                            <th>Proje</th>
                            <th>Talep Durumu</th>
                            <th>Onaylayan<br />Reddeden</th>
                            <th>Onay/Red<br />Ünvan</th>
                            <th>Onay/Red<br />Tarihi</th>
                            <th>Onaylanan<br />Tutar</th>
                            <th>Belirlenen<br />Ödeme<br />Tarihi</th>
                            <th>Ödeme<br />Yapılan<br />Tarih</th>
                            <th>Geri Ödeme Durumu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.Employee.Name @item.Employee.Surname</td>
                                <td>@item.Employee.Title.TitleName</td>
                                <td>@item.Employee.BusinessUnit.BusinessUnitName</td>
                                <td>@Math.Round(item.AdvanceAmount.Value, 0) TL</td>
                                <td>@item.RequestDate.Value.ToString("dd/MM/yyyy")</td>
                                <td>@item.DesiredDate.Value.ToString("dd/MM/yyyy")</td>
                                <td>@item.Project.ProjectName</td>
                                <td>@item.Status.StatusName</td>
                                <td>@item.AdvanceHistories.LastOrDefault().Transactor.Name @item.AdvanceHistories.LastOrDefault().Transactor.Surname</td>
                                <td>@item.AdvanceHistories.LastOrDefault().Transactor.Title.TitleName</td>
                                <td>@item.AdvanceHistories.LastOrDefault().Date.Value.ToString("dd/MM/yyyy")</td>
                                <td>@Math.Round(@item.AdvanceHistories.LastOrDefault().ApprovedAmount.Value, 0) TL</td>

                                <td>
                                    @if (item.Payments != null && item.Payments.Any())
                                    {
                                        @item.Payments.FirstOrDefault().DeterminedPaymentDate.Value.ToString("dd/MM/yyyy")
                                    }
                                </td>

                                <td>
                                    @if (item.Receipts != null && item.Receipts.Any(x => x.IsRefundReceipt == false))
                                    {
                                        @item.Receipts.FirstOrDefault(x => x.IsRefundReceipt == false).Date.Value.ToString("dd/MM/yyyy")
                                    }
                                </td>

                                @if (!item.Payments.Any())
                                {
                                    <td></td>
                                }
                                else if (item.Receipts != null && item.Receipts.Any(x => x.IsRefundReceipt == true))
                                {
                                    <td>Geri Ödeme Yapıldı</td>
                                }
                                else
                                {
                                    <td>Geri Ödeme Yapılmadı</td>
                                }

                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>

<script>
    // Tabloyu veri olarak almak için bir fonksiyon
    function getTableData(table) {
        var data = [];
        // Tablonun başlıklarını almak
        var headers = [];
        table.querySelectorAll("th").forEach(function (header) {
            headers.push(header.innerText);
        });
        data.push(headers);
        // Tablonun satırlarını almak
        table.querySelectorAll("tbody tr").forEach(function (row) {
            var rowData = [];
            row.querySelectorAll("td").forEach(function (cell) {
                rowData.push(cell.innerText);
            });
            data.push(rowData);
        });
        return data;
    }

    // Tabloyu PDF dosyasına dönüştürmek için bir fonksiyon
    function exportTableToPDF(table) {
        var customFont = {
            Arial: {
                normal: 'https://cdnjs.cloudflare.com/ajax/libs/jsPDF/2.4.0/fonts/arial.ttf'
            }
        };
        // jsPDF nesnesi oluşturmak
        var doc = new jsPDF({
            orientation: 'landscape' // Bu satırı ekleyerek sayfanın yatay olmasını sağlar
        });
        doc.addFont(customFont.Arial.normal, 'Arial', 'normal');
        doc.setFont('Arial');

        // Tablo verisini almak
        var data = getTableData(table);
        // Tabloyu PDF dosyasına yazdırmak
        doc.autoTable({
            head: data.slice(0, 1),
            body: data.slice(1),
        });
        // PDF dosyasını indirmek
        doc.save("Avans_Talep_Raporu.pdf");
    }

    // Tabloyu Excel dosyasına dönüştürmek için bir fonksiyon
    function exportTableToExcel(table) {
        // SheetJS nesnesi oluşturmak
        var wb = XLSX.utils.book_new();
        // Tablo verisini almak
        var data = getTableData(table);
        // Tabloyu bir çalışma sayfasına dönüştürmek
        var ws = XLSX.utils.aoa_to_sheet(data);
        // Çalışma sayfasını çalışma kitabına eklemek
        XLSX.utils.book_append_sheet(wb, ws, "Avans Talep Raporu");
        // Excel dosyasını indirmek
        XLSX.writeFile(wb, "Avans_Talep_Raporu.xlsx");
    }

    // Butonlara tıklama olaylarını tanımlamak
    var table = document.querySelector("table"); // Tabloyu seçmek
    var pdfButton = document.querySelector(".btn-group button:first-child"); // PDF butonunu seçmek
    var excelButton = document.querySelector(".btn-group button:last-child"); // Excel butonunu seçmek

    // PDF butonuna tıklandığında, tabloyu PDF dosyasına dönüştürmek
    pdfButton.addEventListener("click", function () {
        exportTableToPDF(table);
    });

    // Excel butonuna tıklandığında, tabloyu Excel dosyasına dönüştürmek
    excelButton.addEventListener("click", function () {
        exportTableToExcel(table);
    });

</script>